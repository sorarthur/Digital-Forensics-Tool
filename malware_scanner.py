import hashlib
import yara
import os

# The path to the rules file remains the same
YARA_RULES_PATH = os.path.join('rules', 'arc_botnet_detector.yar')

def load_malicious_hashes(file_path):
    """
    Loads a list of malicious hashes from a text file.
    Returns an empty set if the file is not found.
    """
    if not os.path.exists(file_path):
        print(f"[WARNING] Malicious hashes file not found at: {file_path}")
        return set()
    with open(file_path, 'r') as f:
        # Using a set for much faster hash lookups (O(1) complexity)
        return {line.strip() for line in f}

def calculate_hash(file_path):
    """
    Calculates the SHA-256 hash of a file.
    """
    sha256 = hashlib.sha256()
    with open(file_path, 'rb') as f:
        # Read the file in 4KB chunks
        for block in iter(lambda: f.read(4096), b""):
            sha256.update(block)
    return sha256.hexdigest()

def compile_rules(rules_path):
    """
    Compiles YARA rules from the specified file path.
    This function should be called by the UI once to optimize performance.
    """
    if not os.path.exists(rules_path):
        print(f"[ERROR] YARA rules file not found: {rules_path}")
        return None
    try:
        print(f"[INFO] Compiling rules from '{rules_path}'...")
        rules = yara.compile(filepath=rules_path)
        print("[INFO] Rules compiled successfully.")
        return rules
    except yara.Error as e:
        print(f"[ERROR] Failed to compile YARA rules: {e}")
        return None

def scan_file(file_path, compiled_rules, malicious_hashes):
    """
    Main scanning function.
    It checks the file's hash and then scans it with pre-compiled YARA rules.
    Returns a dictionary containing the analysis results.
    """
    results = {
        'file_path': file_path,
        'file_hash': None,
        'hash_match': False,
        'yara_matches': [],
        'is_malicious': False,
        'status_message': ''
    }

    try:
        # 1. Check the file hash
        file_hash = calculate_hash(file_path)
        results['file_hash'] = file_hash
        if file_hash in malicious_hashes:
            results['hash_match'] = True
            results['is_malicious'] = True
            results['status_message'] = f"ALERT: Known malicious hash found! ({file_hash})"
            # If the hash is a known threat, we can stop here.
            return results

        # 2. Scan with YARA (only if the hash is clean)
        if compiled_rules:
            matches = compiled_rules.match(filepath=file_path)
            if matches:
                results['is_malicious'] = True
                # Store the names of all matching rules
                results['yara_matches'] = [match.rule for match in matches]
                results['status_message'] = f"ALERT: YARA rules detected a potential threat."
            else:
                 results['status_message'] = "Scan complete. No threats detected. âœ…"
        else:
            # This case occurs if the rules file was not found or failed to compile
            results['status_message'] = "Hash is clean. No YARA rules were provided for further analysis."

    except yara.Error as e:
        # Handles cases where the file cannot be read (e.g., permission issues, system files)
        results['status_message'] = f"Permission error or locked file: {e}"
    except Exception as e:
        results['status_message'] = f"An unexpected error occurred during the scan: {e}"
        print(f"[ERROR] Failed to scan {file_path}: {e}")

    return results

def scan_directory(directory_path, compiled_rules, malicious_hashes):
    """
    Recursively scans all files in a given directory.
    Returns a summary of the scan and a list of malicious files found.
    """
    malicious_files_found = []
    files_scanned = 0
    
    for root, _, files in os.walk(directory_path):
        for file_name in files:
            file_path = os.path.join(root, file_name)
            files_scanned += 1
            
            result = scan_file(file_path, compiled_rules, malicious_hashes)
            
            if result.get('is_malicious'):
                malicious_files_found.append(result)
                
    results_summary = {
        "scan_summary": {
            "directory_scanned": directory_path,
            "total_files_scanned": files_scanned,
            "malicious_files_found": len(malicious_files_found),
        },
        "malicious_files": malicious_files_found
    }
    
    return results_summary