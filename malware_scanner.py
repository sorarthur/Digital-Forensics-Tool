import hashlib
import yara

# load the .txt file containing malicious hashes
def load_malicious_hashes(file_path):
    with open(file_path, 'r') as f:
        return [line.strip() for line in f]
    
# calculate the SHA-256 hash of a file
def calculate_hash(file_path):
    sha256 = hashlib.sha256()
    with open(file_path, 'rb') as f:
        for block in iter(lambda: f.read(4096), b""):
            sha256.update(block)
    return sha256.hexdigest()

# check a file against the list of malicious hashes
def check_hash(file_path, malicious_hashes):
    file_hash = calculate_hash(file_path)
    if file_hash in malicious_hashes:
        return "Malicious file detected: {file_path} (Hash: {file_hash})", file_hash
    
    return "File is clean of malicious hashes: {file_path} (Hash: {file_hash})", file_hash

def yara_scanner(file_path, rules_path):
    try:
        rules = yara.compile(filepath=rules_path)
        matches = rules.match(file_path)
        if matches:
            return f"YARA rules matched: {matches}"
        else:
            return "No YARA rules matched."
    except Exception as e:
        return f"Error scanning file with YARA: {e}"

def scanner(file_path, malicious_hashes, rules_path):
    hash_result = check_hash(file_path, malicious_hashes)
    if hash_result[0].startswith("Malicious"):
        return hash_result, None
    else:
        # if the file is a hash clean file, proceed with YARA scanning
        if rules_path:
            yara_result = yara_scanner(file_path, rules_path)
        else:
            yara_result = "No YARA rules provided for scanning."
        return hash_result, yara_result